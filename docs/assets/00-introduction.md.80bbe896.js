import{_ as e,c as t,o as p,a}from"./app.d3f04dc6.js";const f=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[{"level":2,"title":"学习旅途","slug":"学习旅途","link":"#学习旅途","children":[]}],"relativePath":"00-introduction.md"}'),i={name:"00-introduction.md"},o=a('<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-hidden="true">#</a></h1><p>覆盖前端测试方向的所有内容，包含</p><ul><li>单元测试</li><li>组件测试</li><li>端对端测试</li></ul><p>不止测试框架的使用 更多的是测试的核心思想以及项目实战</p><h2 id="学习旅途" tabindex="-1">学习旅途 <a class="header-anchor" href="#学习旅途" aria-hidden="true">#</a></h2><p>内容在设计上采用了渐进式的学习方式</p><p>首先需要改变对测试的认知，明确写测试可以带来的好处，这是学习的动力所在，也是最重要的一点。</p><p>然后从定义上搞明白传统的单元测试和单元级别的功能测试有何不同。</p><p>接着使用 Vitest 写第一个测试，了解一个测试的基本结构，并且感受手动测试和自动化测试的在效率上的差异。</p><p>然后学习 Vitest 的基础使用 当然还会对比 Vitest 和 Jest 之间的差异性。</p><p>到这里测试框架的基础 API 会用了，但是还远远不够还需要深入测试的核心思想。</p><p>我们以测试的基本结构为核心路径，首先探索在准备数据阶段的做法，接着进入测试最核心也是最复杂的验证阶段，最后来到拆卸阶段。 经过这段学习旅程之后 就可以掌握如何写出测试了</p><p>但是写出测试和写出好的测试是两码事，只有写出好的测试来才能让我们的项目长期受益。</p><p>所以还需要学习优秀的测试是长什么样子的，学习测试原则，最后去锻炼辨别测试中的坏味道。</p><p>接着进入项目实战环节，把上面学到的知识全部应用起来。</p><p>在这里会遇到更多的问题，比如测试文件的组织、测试上下文的选择、不同类型的项目测试策略的选择等等</p><p>你准备好开始这段旅途了吗？ 我准备好了。</p><blockquote><p>因为是单元测试篇，所以项目实战中只会探索如何添加单元测试</p></blockquote>',18),r=[o];function n(s,c,_,d,l,h){return p(),t("div",null,r)}const m=e(i,[["render",n]]);export{f as __pageData,m as default};
